#!/usr/bin/env python3
import sqlite3
import hashlib
import sys
import os

# Verificar se estamos no diret√≥rio correto
if not os.path.exists('backend/gestao_obras.db'):
    print("‚ùå Banco n√£o encontrado! Execute este script no diret√≥rio raiz do projeto.")
    sys.exit(1)

def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

def test_database():
    print("üîç TESTE COMPLETO DA BASE DE DADOS")
    print("=================================")
    
    conn = sqlite3.connect('backend/gestao_obras.db')
    cursor = conn.cursor()
    
    try:
        # 1. Verificar se tabela existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='usuarios'")
        if not cursor.fetchone():
            print("‚ùå Tabela usuarios n√£o existe!")
            print("üîß Criando tabela...")
            
            cursor.execute("""
                CREATE TABLE usuarios (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username VARCHAR UNIQUE NOT NULL,
                    hashed_password VARCHAR NOT NULL,
                    nome VARCHAR NOT NULL,
                    email VARCHAR,
                    nivel_acesso VARCHAR NOT NULL DEFAULT 'visualizacao',
                    ativo BOOLEAN DEFAULT 1
                )
            """)
            conn.commit()
            print("‚úÖ Tabela criada!")
        else:
            print("‚úÖ Tabela usuarios existe!")
        
        # 2. Verificar estrutura
        cursor.execute("PRAGMA table_info(usuarios)")
        columns = cursor.fetchall()
        print(f"üìã Colunas da tabela: {[col[1] for col in columns]}")
        
        # 3. Verificar se temos usu√°rios
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        count = cursor.fetchone()[0]
        print(f"üë§ Total de usu√°rios: {count}")
        
        if count == 0:
            print("üîß Criando usu√°rios padr√£o...")
            
            # Criar admin
            admin_hash = hash_password("admin")
            cursor.execute("""
                INSERT INTO usuarios (username, hashed_password, nome, email, nivel_acesso, ativo)
                VALUES (?, ?, ?, ?, ?, ?)
            """, ("admin", admin_hash, "Administrador", "admin@thors.com", "Admin", 1))
            
            # Criar manuten√ß√£o
            manutencao_hash = hash_password("123456")
            cursor.execute("""
                INSERT INTO usuarios (username, hashed_password, nome, email, nivel_acesso, ativo)
                VALUES (?, ?, ?, ?, ?, ?)
            """, ("manutencao", manutencao_hash, "Usu√°rio Manuten√ß√£o", "manutencao@thors.com", "Manuten√ß√£o", 1))
            
            conn.commit()
            print("‚úÖ Usu√°rios criados!")
        
        # 4. Listar usu√°rios
        cursor.execute("SELECT id, username, nivel_acesso, ativo FROM usuarios")
        users = cursor.fetchall()
        print(f"\nüë• USU√ÅRIOS CADASTRADOS:")
        for user in users:
            status = "üü¢ Ativo" if user[3] else "üî¥ Inativo"
            print(f"   ID:{user[0]} | {user[1]} | {user[2]} | {status}")
        
        # 5. Testar autentica√ß√£o
        print(f"\nüîê TESTE DE AUTENTICA√á√ÉO:")
        
        cursor.execute("SELECT username, hashed_password FROM usuarios WHERE username = 'admin'")
        admin_data = cursor.fetchone()
        if admin_data:
            stored_hash = admin_data[1]
            test_hash = hash_password("admin")
            match = stored_hash == test_hash
            print(f"   Admin hash: {'‚úÖ OK' if match else '‚ùå FALHOU'}")
        
        cursor.execute("SELECT username, hashed_password FROM usuarios WHERE username = 'manutencao'")
        manutencao_data = cursor.fetchone()
        if manutencao_data:
            stored_hash = manutencao_data[1]
            test_hash = hash_password("123456")
            match = stored_hash == test_hash
            print(f"   Manuten√ß√£o hash: {'‚úÖ OK' if match else '‚ùå FALHOU'}")
        
        print(f"\nüéØ CREDENCIAIS PARA LOGIN:")
        print(f"   üë§ admin / admin")
        print(f"   üîß manutencao / 123456")
        
        print(f"\n‚úÖ BASE DE DADOS EST√Å PRONTA!")
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
    finally:
        conn.close()

if __name__ == "__main__":
    test_database()
